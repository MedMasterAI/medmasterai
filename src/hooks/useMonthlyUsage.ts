import { useState, useCallback, useEffect } from "react";
import { PLAN_LIMITS } from "@/lib/plans";
import { toast } from "sonner";
import { getAuth } from "firebase/auth";

type PlanType = "free" | "pro" | "unlimited";

type UseMonthlyUsage = {
  pdfCount: number;
  videoCount: number;
  canPdf: boolean;
  canVideo: boolean;
  increment: (type: "pdf" | "video") => Promise<void>;
};

/**
 * Track the number of PDF and video notes generated by a user during the month.
 *
 * @param uid The user's UID. If `null`, the hook does nothing.
 * @param plan Current subscription plan to enforce limits.
 * @returns Counters, limit flags and an increment function.
 */
export function useMonthlyUsage(
  uid: string | null,
  plan: PlanType,
): UseMonthlyUsage {
  const [counts, setCounts] = useState({
    pdfCount: 0,
    videoCount: 0,
  });

  // Carga inicial de uso desde backend
  useEffect(() => {
    if (!uid) return;
    const fetchCounts = async () => {
      try {
        const user = getAuth().currentUser;
        if (!user) throw new Error("No hay usuario");
        const token = await user.getIdToken();
        const res = await fetch("/api/usage", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ type: "status", uid, plan }),
        });
        const data = await res.json();
        if (!res.ok) throw new Error(data.error || "Error al obtener uso");
        setCounts({
          pdfCount: data.pdfCount,
          videoCount: data.videoCount,
        });
      } catch (err: any) {
        console.error(err);
        toast.error("No se pudo cargar el uso mensual");
      }
    };
    fetchCounts();
  }, [uid, plan]);

  const increment = useCallback(
    async (type: "pdf" | "video") => {
      if (!uid) throw new Error("No hay usuario");
      const user = getAuth().currentUser;
      if (!user) throw new Error("No hay usuario");
      const token = await user.getIdToken();
      const res = await fetch("/api/usage", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ type, uid, plan }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error);
      setCounts({
        pdfCount: data.pdfCount,
        videoCount: data.videoCount,
      });
    },
    [uid, plan],
  );

  const canPdf = counts.pdfCount < PLAN_LIMITS[plan].pdf;
  const canVideo = counts.videoCount < PLAN_LIMITS[plan].video;

  return {
    ...counts,
    canPdf,
    canVideo,
    increment,
  };
}
